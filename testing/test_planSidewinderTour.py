"""
Test Script for planSidewinderTour Function

This script tests the `planSidewinderTour` function, which plans an optimal observation tour using a modified
Boustrophedon decomposition method. It visualizes the grid and planned observation path on both the instrument
and topographical coordinates, enabling verification of the generated tour.
"""

import numpy as np
import matplotlib.pyplot as plt
from pySPICElib import kernelFetch
from spiceypy import furnsh, utc2et

# Helper functions (amsplit, grid2D, boustrophedon, etc.)
# Assuming these functions are defined in the same module or are imported
from mosaic_algorithms.sidewinder.planSidewinderTour import planSidewinderTour


def main():
    """
    Main function to execute the test for the `planSidewinderTour` function.

    - Loads SPICE kernels.
    - Defines the ROI as a polygon.
    - Sets parameters for the observation tour.
    - Calls the planSidewinderTour function.
    - Visualizes the results.
    """

    # Load SPICE kernels
    kf = kernelFetch(textFilesPath_='../')
    kf.ffFile(metaK='input/galileo/inputkernels.txt', forceDownload=False)

    # Define the ROI (region of interest) as a polygon in latitude and longitude
    roi = np.array([
        [0, -10],
        [30, -10],
        [30, 10],
        [0, 10],
        [0, -10]
    ])  # A rectangle from 0째 to 30째 longitude and -10째 to 10째 latitude

    # Observation parameters
    target = 'EUROPA'  # Target body
    sc = 'GALILEO ORBITER'  # Spacecraft identifier
    inst = 'GLL_SSI'  # Instrument identifier
    inittime = utc2et('1998-05-30T00:00:00')  # Start time in ET (TDB seconds past J2000)
    olapx = 0.2  # 20% overlap in x-direction
    olapy = 0.2  # 20% overlap in y-direction

    # Call the planSidewinderTour function
    topo_tour, inst_grid, inst_tour, grid_dirx, grid_diry, sweepDir1, sweepDir2 = planSidewinderTour(
        target, roi, sc, inst, inittime, olapx, olapy
    )

    # Visualize the results
    visualize_results(roi, topo_tour, inst_grid, inst_tour, grid_dirx, grid_diry, sweepDir1, sweepDir2)


def visualize_results(roi, topo_tour, inst_grid, inst_tour, grid_dirx, grid_diry, sweepDir1, sweepDir2):
    """
    Visualizes the observation tour and grid generated by the `planSidewinderTour` function.

    Parameters:
    - roi: N x 2 array of ROI vertices.
    - topo_tour: Tour path in topographical coordinates (latitude/longitude).
    - inst_grid: Grid of potential observation points in instrument frame coordinates.
    - inst_tour: Tour path in instrument frame coordinates.
    - grid_dirx: Direction of the grid along the x-axis in the instrument frame.
    - grid_diry: Direction of the grid along the y-axis in the instrument frame.
    - sweepDir1, sweepDir2: Directions defining the sweep of the Boustrophedon decomposition.
    """

    fig, axs = plt.subplots(1, 2, figsize=(14, 6))

    # Plot the topographical tour
    axs[0].plot(roi[:, 0], roi[:, 1], 'k-', label='ROI')
    if topo_tour:
        topo_coords = np.array(topo_tour)
        axs[0].plot(topo_coords[:, 0], topo_coords[:, 1], 'bo-', label='Topographical Tour')
    axs[0].set_title('Topographical Tour (Latitude/Longitude)')
    axs[0].set_xlabel('Longitude (degrees)')
    axs[0].set_ylabel('Latitude (degrees)')
    axs[0].legend()
    axs[0].grid(True)

    # Plot the instrument grid and tour
    inst_x, inst_y = zip(*inst_grid)
    axs[1].scatter(inst_x, inst_y, c='grey', label='Instrument Grid Points', alpha=0.5)
    if inst_tour:
        tour_x, tour_y = zip(*inst_tour)
        axs[1].plot(tour_x, tour_y, 'ro-', label='Instrument Tour Path')
    axs[1].quiver([0], [0], [grid_dirx], [grid_diry], angles='xy', scale_units='xy', scale=1, color='blue',
                  label='Grid Direction')
    axs[1].quiver([0], [0], [sweepDir1[0]], [sweepDir1[1]], angles='xy', scale_units='xy', scale=1, color='green',
                  label='Sweep Direction 1')
    axs[1].quiver([0], [0], [sweepDir2[0]], [sweepDir2[1]], angles='xy', scale_units='xy', scale=1, color='purple',
                  label='Sweep Direction 2')
    axs[1].set_title('Instrument Frame Grid and Tour')
    axs[1].set_xlabel('Instrument X')
    axs[1].set_ylabel('Instrument Y')
    axs[1].legend()
    axs[1].grid(True)

    plt.tight_layout()
    plt.show()


if __name__ == "__main__":
    main()
